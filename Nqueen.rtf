{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red255\green255\blue255;\red71\green137\blue205;
\red194\green126\blue101;\red193\green193\blue193;\red67\green192\blue160;\red212\green213\blue154;\red141\green212\blue254;
\red88\green138\blue67;\red202\green202\blue202;\red167\green197\blue151;\red205\green173\blue106;}
{\*\expandedcolortbl;;\cssrgb\c77331\c52624\c75301;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c33935\c61426\c84130;
\cssrgb\c80778\c56830\c46925;\cssrgb\c80088\c80088\c79988;\cssrgb\c30610\c78876\c69022;\cssrgb\c86261\c86246\c66530;\cssrgb\c61360\c86490\c99746;
\cssrgb\c41525\c59950\c33208;\cssrgb\c83229\c83229\c83125;\cssrgb\c71007\c80807\c65804;\cssrgb\c84255\c72854\c48827;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
#include\cf4  \cf5 <iostream>\cf6 \
\
\cf2 using\cf6  \cf4 namespace\cf6  \cf7 std\cf6 ;\
\
\cf4 bool\cf6  \cf8 isSafe\cf6 (\cf4 int*\cf6  \cf9 board\cf6 , \cf4 int\cf6  \cf9 row\cf6 , \cf4 int\cf6  \cf9 col\cf6 , \cf4 int\cf6  \cf9 N\cf6 ) \{\
\pard\pardeftab720\partightenfactor0
\cf10     // Check if there is a queen in the same column\cf6 \
    \cf2 for\cf6  (\cf4 int\cf6  \cf9 i\cf6  \cf11 =\cf6  \cf12 0\cf6 ; \cf9 i\cf6  \cf11 <\cf6  \cf9 row\cf6 ; \cf9 i\cf11 ++\cf6 ) \{\
        \cf2 if\cf6  (\cf9 board\cf6 [\cf9 i\cf6  \cf11 *\cf6  \cf9 N\cf6  \cf11 +\cf6  \cf9 col\cf6 ] \cf11 ==\cf6  \cf12 1\cf6 ) \{\
            \cf2 return\cf6  \cf4 false\cf6 ;\
        \}\
    \}\
\
\cf10     // Check upper-left diagonal\cf6 \
    \cf2 for\cf6  (\cf4 int\cf6  \cf9 i\cf6  \cf11 =\cf6  \cf9 row\cf6 , \cf9 j\cf6  \cf11 =\cf6  \cf9 col\cf6 ; \cf9 i\cf6  \cf11 >=\cf6  \cf12 0\cf6  \cf11 &&\cf6  \cf9 j\cf6  \cf11 >=\cf6  \cf12 0\cf6 ; \cf9 i\cf11 --\cf6 , \cf9 j\cf11 --\cf6 ) \{\
        \cf2 if\cf6  (\cf9 board\cf6 [\cf9 i\cf6  \cf11 *\cf6  \cf9 N\cf6  \cf11 +\cf6  \cf9 j\cf6 ] \cf11 ==\cf6  \cf12 1\cf6 ) \{\
            \cf2 return\cf6  \cf4 false\cf6 ;\
        \}\
    \}\
\
\cf10     // Check upper-right diagonal\cf6 \
    \cf2 for\cf6  (\cf4 int\cf6  \cf9 i\cf6  \cf11 =\cf6  \cf9 row\cf6 , \cf9 j\cf6  \cf11 =\cf6  \cf9 col\cf6 ; \cf9 i\cf6  \cf11 >=\cf6  \cf12 0\cf6  \cf11 &&\cf6  \cf9 j\cf6  \cf11 <\cf6  \cf9 N\cf6 ; \cf9 i\cf11 --\cf6 , \cf9 j\cf11 ++\cf6 ) \{\
        \cf2 if\cf6  (\cf9 board\cf6 [\cf9 i\cf6  \cf11 *\cf6  \cf9 N\cf6  \cf11 +\cf6  \cf9 j\cf6 ] \cf11 ==\cf6  \cf12 1\cf6 ) \{\
            \cf2 return\cf6  \cf4 false\cf6 ;\
        \}\
    \}\
\
    \cf2 return\cf6  \cf4 true\cf6 ;\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf4 void\cf6  \cf8 solveNQueens\cf6 (\cf4 int*\cf6  \cf9 board\cf6 , \cf4 int\cf6  \cf9 row\cf6 , \cf4 int\cf6  \cf9 N\cf6 , \cf4 int&\cf6  \cf9 solutionCount\cf6 ) \{\
    \cf2 if\cf6  (\cf9 row\cf6  \cf11 ==\cf6  \cf9 N\cf6 ) \{\
\pard\pardeftab720\partightenfactor0
\cf10         // A solution is found\cf6 \
        \cf9 solutionCount\cf11 ++\cf6 ;\
        \cf9 cout\cf6  \cf8 <<\cf6  \cf5 "Solution "\cf6  \cf8 <<\cf6  \cf9 solutionCount\cf6  \cf8 <<\cf6  \cf5 ":\cf13 \\n\cf5 "\cf6 ;\
\cf10         // Print the solution\cf6 \
        \cf2 for\cf6  (\cf4 int\cf6  \cf9 i\cf6  \cf11 =\cf6  \cf12 0\cf6 ; \cf9 i\cf6  \cf11 <\cf6  \cf9 N\cf6 ; \cf9 i\cf11 ++\cf6 ) \{\
            \cf2 for\cf6  (\cf4 int\cf6  \cf9 j\cf6  \cf11 =\cf6  \cf12 0\cf6 ; \cf9 j\cf6  \cf11 <\cf6  \cf9 N\cf6 ; \cf9 j\cf11 ++\cf6 ) \{\
                \cf2 if\cf6  (\cf9 board\cf6 [\cf9 i\cf6  \cf11 *\cf6  \cf9 N\cf6  \cf11 +\cf6  \cf9 j\cf6 ] \cf11 ==\cf6  \cf12 1\cf6 ) \{\
                    \cf9 cout\cf6  \cf8 <<\cf6  \cf5 "Q "\cf6 ;\
                \} \cf2 else\cf6  \{\
                    \cf9 cout\cf6  \cf8 <<\cf6  \cf5 ". "\cf6 ;\
                \}\
            \}\
            \cf9 cout\cf6  \cf8 <<\cf6  \cf8 endl\cf6 ;\
        \}\
        \cf9 cout\cf6  \cf8 <<\cf6  \cf8 endl\cf6 ;\
        \cf2 return\cf6 ;\
    \}\
\
    \cf2 for\cf6  (\cf4 int\cf6  \cf9 col\cf6  \cf11 =\cf6  \cf12 0\cf6 ; \cf9 col\cf6  \cf11 <\cf6  \cf9 N\cf6 ; \cf9 col\cf11 ++\cf6 ) \{\
        \cf2 if\cf6  (\cf8 isSafe\cf6 (\cf9 board\cf6 , \cf9 row\cf6 , \cf9 col\cf6 , \cf9 N\cf6 )) \{\
            \cf9 board\cf6 [\cf9 row\cf6  \cf11 *\cf6  \cf9 N\cf6  \cf11 +\cf6  \cf9 col\cf6 ] \cf11 =\cf6  \cf12 1\cf6 ;\
            \cf8 solveNQueens\cf6 (\cf9 board\cf6 , \cf9 row\cf6  \cf11 +\cf6  \cf12 1\cf6 , \cf9 N\cf6 , \cf9 solutionCount\cf6 );\
            \cf9 board\cf6 [\cf9 row\cf6  \cf11 *\cf6  \cf9 N\cf6  \cf11 +\cf6  \cf9 col\cf6 ] \cf11 =\cf6  \cf12 0\cf6 ;\cf10  // Backtrack\cf6 \
        \}\
    \}\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf4 int\cf6  \cf8 main\cf6 () \{\
    \cf4 int\cf6  \cf9 N\cf6 ;\
    \cf9 cout\cf6  \cf8 <<\cf6  \cf5 "Enter the board size (N): "\cf6 ;\
    \cf9 cin\cf6  \cf8 >>\cf6  \cf9 N\cf6 ;\
\
\pard\pardeftab720\partightenfactor0
\cf10     // Size of the array is N * N\cf6 \
    \cf4 int\cf6  \cf9 board\cf6 [\cf9 N\cf6  \cf11 *\cf6  \cf9 N\cf6 ] \cf11 =\cf6  \{\cf12 0\cf6 \};\
\
    \cf4 int\cf6  \cf9 solutionCount\cf6  \cf11 =\cf6  \cf12 0\cf6 ;\
\
    \cf8 solveNQueens\cf6 (\cf9 board\cf6 , \cf12 0\cf6 , \cf9 N\cf6 , \cf9 solutionCount\cf6 );\
\
    \cf9 cout\cf6  \cf8 <<\cf6  \cf5 "Found "\cf6  \cf8 <<\cf6  \cf9 solutionCount\cf6  \cf8 <<\cf6  \cf5 " solutions for "\cf6  \cf8 <<\cf6  \cf9 N\cf6  \cf8 <<\cf6  \cf5 "-Queens.\cf13 \\n\cf5 "\cf6 ;\
\
    \cf2 return\cf6  \cf12 0\cf6 ;\
\}\
\
}