{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf0 \cb2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 #include <iostream>\
using namespace std;\
\
void readObjects(int n, int weights[], int profits[]);\
void sortByRatio(int n, int weights[], int profits[], double ratios[]);\
double solveKnapsack(int n, int weights[], int profits[], double ratios[], int capacity);\
\
int main() \{\
    int choice;\
    int n;\
    int weights[100], profits[100];\
    double ratios[100];\
    int capacity;\
    double totalProfit;\
\
    while (true) \{\
        cout << "Menu:" << endl;\
        cout << "1. Read objects info" << endl;\
        cout << "2. Calculate maximum profit" << endl;\
        cout << "3. Exit" << endl;\
        cout << "Enter your choice: ";\
        cin >> choice;\
\
        switch (choice) \{\
            case 1:\
                cout << "Enter total number of objects: ";\
                cin >> n;\
                readObjects(n, weights, profits);\
                break;\
            case 2:\
                if (n > 0) \{\
                    sortByRatio(n, weights, profits, ratios);\
                    cout << "Enter knapsack capacity: ";\
                    cin >> capacity;\
                    totalProfit = solveKnapsack(n, weights, profits, ratios, capacity);\
                    cout << "Maximum profit: " << totalProfit << endl;\
                \} else \{\
                    cout << "read object info first." << endl;\
                \}\
                break;\
            case 3:\
                cout << "Exiting program." << endl;\
                return 0;\
            default:\
                cout << "Invalid choice. " << endl;\
        \}\
    \}\
\
    return 0;\
\}\
\
void readObjects(int n, int weights[], int profits[]) \{\
    for (int i = 0; i < n; i++) \{\
        cout << "Enter weight for object " << i + 1 << ": ";\
        cin >> weights[i];\
        cout << "Enter profit for object " << i + 1 << ": ";\
        cin >> profits[i];\
    \}\
\}\
\
void sortByRatio(int n, int weights[], int profits[], double ratios[]) \{\
    for (int i = 0; i < n; i++) \{\
        ratios[i] = (double)profits[i] / weights[i];\
    \}\
\
    for (int i = 0; i < n - 1; i++) \{\
        for (int j = i + 1; j < n; j++) \{\
            if (ratios[i] < ratios[j]) \{\
                swap(ratios[i], ratios[j]);\
                swap(weights[i], weights[j]);\
                swap(profits[i], profits[j]);\
            \}\
        \}\
    \}\
\}\
\
double solveKnapsack(int n, int weights[], int profits[], double ratios[], int capacity) \{\
    double totalProfit = 0.0;\
    int currentWeight = 0;\
\
    for (int i = 0; i < n; i++) \{\
        if (currentWeight + weights[i] <= capacity) \{\
            currentWeight += weights[i];\
            totalProfit += profits[i];\
        \} else \{\
            double remainingCapacity = capacity - currentWeight;\
            totalProfit += ratios[i] * remainingCapacity;\
            break;\
        \}\
    \}\
\
    return totalProfit;\
\}\
\
}