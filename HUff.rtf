{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <stdio.h>\
#include <iostream>\
#include <stdlib.h>\
#define MAX_TREE_HT 100\
using namespace std;\
\
// Structure to represent a node in the Huffman tree\
struct MinHeapNode \{\
    char data;\
    unsigned freq;\
    struct MinHeapNode* left, *right;\
\};\
\
// Structure to represent a Min Heap\
// T - o(nlogn) S- 0(n)\
struct MinHeap \{\
    unsigned size;\
    unsigned capacity;\
    struct MinHeapNode** array;\
\};\
\
// Function to create a new Min Heap Node\
struct MinHeapNode* newNode(char data, unsigned freq) \{\
    struct MinHeapNode* temp = (struct MinHeapNode*)malloc(sizeof(struct MinHeapNode));\
\
    temp->left = temp->right = NULL;\
    temp->data = data;\
    temp->freq = freq;\
\
    return temp;\
\}\
\
// Function to create a new Min Heap\
struct MinHeap* createMinHeap(unsigned capacity) \{\
    struct MinHeap* minHeap = (struct MinHeap*)malloc(sizeof(struct MinHeap));\
\
    minHeap->size = 0;\
    minHeap->capacity = capacity;\
    minHeap->array = (struct MinHeapNode**)malloc(minHeap->capacity * sizeof(struct MinHeapNode*));\
\
    return minHeap;\
\}\
\
// Function to swap two Min Heap Nodes\
void swapMinHeapNode(struct MinHeapNode** a, struct MinHeapNode** b) \{\
    struct MinHeapNode* t = *a;\
    *a = *b;\
    *b = t;\
\}\
\
// Function to maintain Min Heap property\
void minHeapify(struct MinHeap* minHeap, int idx) \{\
    int smallest = idx;\
    int left = 2 * idx + 1;\
    int right = 2 * idx + 2;\
\
    if (left < minHeap->size && minHeap->array[left]->freq < minHeap->array[smallest]->freq)\
        smallest = left;\
\
    if (right < minHeap->size && minHeap->array[right]->freq < minHeap->array[smallest]->freq)\
        smallest = right;\
\
    if (smallest != idx) \{\
        swapMinHeapNode(&minHeap->array[smallest], &minHeap->array[idx]);\
        minHeapify(minHeap, smallest);\
    \}\
\}\
\
// Check if the size of the Min Heap is 1\
int isSizeOne(struct MinHeap* minHeap) \{\
    return (minHeap->size == 1);\
\}\
\
// Extract the node with the minimum frequency from the Min Heap\
struct MinHeapNode* extractMin(struct MinHeap* minHeap) \{\
    struct MinHeapNode* temp = minHeap->array[0];\
    minHeap->array[0] = minHeap->array[minHeap->size - 1];\
    --minHeap->size;\
    minHeapify(minHeap, 0);\
\
    return temp;\
\}\
\
// Insert a new node into the Min Heap\
void insertMinHeap(struct MinHeap* minHeap, struct MinHeapNode* minHeapNode) \{\
    ++minHeap->size;\
    int i = minHeap->size - 1;\
\
    while (i && minHeapNode->freq < minHeap->array[(i - 1) / 2]->freq) \{\
        minHeap->array[i] = minHeap->array[(i - 1) / 2];\
        i = (i - 1) / 2;\
    \}\
\
    minHeap->array[i] = minHeapNode;\
\}\
\
// Build a Min Heap from the given array\
void buildMinHeap(struct MinHeap* minHeap) \{\
    int n = minHeap->size - 1;\
    int i;\
\
    for (i = (n - 1) / 2; i >= 0; --i)\
        minHeapify(minHeap, i);\
\}\
\
// Print an array of integers\
void printArr(int arr[], int n) \{\
    int i;\
    for (i = 0; i < n; ++i)\
        printf("%d", arr[i]);\
\
    printf("\\n");\
\}\
\
// Check if a node is a leaf node\
int isLeaf(struct MinHeapNode* root) \{\
    return !(root->left) && !(root->right);\
\}\
\
// Create and build a Min Heap for the characters and their frequencies\
struct MinHeap* createAndBuildMinHeap(char data[], int freq[], int size) \{\
    struct MinHeap* minHeap = createMinHeap(size);\
    for (int i = 0; i < size; ++i)\
        minHeap->array[i] = newNode(data[i], freq[i]);\
\
    minHeap->size = size;\
    buildMinHeap(minHeap);\
\
    return minHeap;\
\}\
\
// Build the Huffman Tree and return the root\
struct MinHeapNode* buildHuffmanTree(char data[], int freq[], int size) \{\
    struct MinHeapNode* left, *right, *top;\
\
    struct MinHeap* minHeap = createAndBuildMinHeap(data, freq, size);\
\
    while (!isSizeOne(minHeap)) \{\
        left = extractMin(minHeap);\
        right = extractMin(minHeap);\
\
        top = newNode('$', left->freq + right->freq);\
\
        top->left = left;\
        top->right = right;\
\
        insertMinHeap(minHeap, top);\
    \}\
\
    return extractMin(minHeap);\
\}\
\
// Print the Huffman codes for each character in the Huffman Tree\
void printCodes(struct MinHeapNode* root, int arr[], int top) \{\
    if (root->left) \{\
        arr[top] = 0;\
        printCodes(root->left, arr, top + 1);\
    \}\
\
    if (root->right) \{\
        arr[top] = 1;\
        printCodes(root->right, arr, top + 1);\
    \}\
\
    if (isLeaf(root)) \{\
        printf("%c: ", root->data);\
        printArr(arr, top);\
    \}\
\}\
\
// Main function\
void HuffmanCodes(char data[], int freq[], int size) \{\
    // Build the Huffman Tree\
    struct MinHeapNode* root = buildHuffmanTree(data, freq, size);\
\
    // Initialize an array to store Huffman codes\
    int arr[MAX_TREE_HT], top = 0;\
\
    // Print Huffman codes\
    printCodes(root, arr, top);\
\}\
\
// Driver code\
int main() \{\
    int ch;\
    cout << "\\nEnter Total Element No.: ";\
    cin >> ch;\
\
    char arr[ch];\
    int freq[ch];\
\
    // Input characters and their frequencies\
    for (int i = 0; i < ch; i++) \{\
        cout << "\\nEnter Character: ";\
        cin >> arr[i];\
        cout << "\\nEnter Freq: ";\
        cin >> freq[i];\
    \}\
\
    int size = sizeof(arr) / sizeof(arr[0]);\
\
    cout << "\\nHuffman Encoding using a greedy strategy:\\n";\
    HuffmanCodes(arr, freq, size);\
\
    return 0;\
\}\
}