{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 x#include <iostream>\
using namespace std;\
\
// Function to solve the 0/1 Knapsack problem and calculate maximum profit\
// T- O(n * capacity), S- O(n * capacity)\
double solveKnapsack(int n, int weights[], int profits[], int capacity) \{\
    // Create a 2D array to store the results of subproblems\
    int dp[n + 1][capacity + 1];\
\
    // Initialize the first row and column of the array\
    for (int i = 0; i <= n; i++) \{\
        for (int w = 0; w <= capacity; w++) \{\
            if (i == 0 || w == 0) \{\
                dp[i][w] = 0;\
            \} else if (weights[i - 1] <= w) \{\
                dp[i][w] = max(profits[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);\
            \} else \{\
                dp[i][w] = dp[i - 1][w];\
            \}\
        \}\
    \}\
\
    return dp[n][capacity];\
\}\
\
int main() \{\
    int n;\
    int weights[100], profits[100];\
    int capacity;\
    double totalProfit;\
\
    // Read object information\
    cout << "Enter total number of objects: ";\
    cin >> n;\
\
    cout << "Enter weights and profits for each object:" << endl;\
    for (int i = 0; i < n; i++) \{\
        cout << "Object " << i + 1 << ": ";\
        cin >> weights[i] >> profits[i];\
    \}\
\
    // Calculate maximum profit using the 0/1 Knapsack algorithm\
    cout << "Enter knapsack capacity: ";\
    cin >> capacity;\
    totalProfit = solveKnapsack(n, weights, profits, capacity);\
    cout << "Maximum profit: " << totalProfit << endl;\
\
    return 0;\
\}\
}